name: CI/CD - store-api → ECS (Fargate)

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: ecs-store-api
  cancel-in-progress: true

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPO: ${{ secrets.ECR_REPO }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
  ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
  ECS_TASK_FAMILY: ${{ secrets.ECS_TASK_FAMILY }}
  CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with: { version: 9.11.0 }

      - uses: actions/setup-node@v4
        with: { node-version: "20", cache: "pnpm" }

      - name: Install & build
        run: |
          pnpm install --frozen-lockfile
          pnpm build

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            IMAGE_TAG="${GITHUB_REF_NAME}"
          else
            IMAGE_TAG="${GITHUB_SHA::12}"
          fi
          IMAGE_URI="$ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG"
          docker build --platform linux/amd64 -t "$IMAGE_URI" .
          docker push "$IMAGE_URI"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Render task definition
        id: render
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: infra/taskdef.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.IMAGE_URI }}

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Update Cloudflare A record (api.stevenpatino.dev)
        env:
          CF_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          ECS_CLUSTER: ${{ env.ECS_CLUSTER }}
          ECS_SERVICE: ${{ env.ECS_SERVICE }}
        run: |
          set -euo pipefail

          NAME="api.stevenpatino.dev"

          echo "Esperando a que el servicio tenga al menos 1 tarea RUNNING..."
          # Espera hasta 5 min (30 intentos * 10s) a que aparezca una tarea RUNNING
          for i in $(seq 1 30); do
            TASK_ARN=$(aws ecs list-tasks \
              --cluster "$ECS_CLUSTER" \
              --service-name "$ECS_SERVICE" \
              --desired-status RUNNING \
              --query 'taskArns[0]' --output text || true)

            if [ -n "${TASK_ARN:-}" ] && [ "$TASK_ARN" != "None" ]; then
              echo "TASK_ARN: $TASK_ARN"
              break
            fi
            echo "Aún no hay tarea RUNNING. Reintentando ($i/30)..."
            sleep 10
          done

          if [ -z "${TASK_ARN:-}" ] || [ "$TASK_ARN" = "None" ]; then
            echo "No se encontró una tarea RUNNING tras esperar. Abortando."
            exit 1
          fi

          echo "Intentando obtener ENI desde attachments..."
          ENI_ID=$(aws ecs describe-tasks --cluster "$ECS_CLUSTER" --tasks "$TASK_ARN" \
            --query "tasks[0].attachments[?type=='ElasticNetworkInterface'].details[?name=='networkInterfaceId'] | [0][0].value" \
            --output text || true)

          if [ -z "${ENI_ID:-}" ] || [ "$ENI_ID" = "None" ]; then
            echo "No se obtuvo ENI por attachments. Buscando por IP privada del contenedor..."
            PRIV_IP=$(aws ecs describe-tasks --cluster "$ECS_CLUSTER" --tasks "$TASK_ARN" \
              --query "tasks[0].containers[0].networkInterfaces[0].privateIpv4Address" \
              --output text || true)

            if [ -z "${PRIV_IP:-}" ] || [ "$PRIV_IP" = "None" ]; then
              echo "No se pudo obtener la IP privada. Abortando."
              exit 1
            fi

            ENI_ID=$(aws ec2 describe-network-interfaces \
              --filters "Name=private-ip-address,Values=$PRIV_IP" \
              --query 'NetworkInterfaces[0].NetworkInterfaceId' \
              --output text || true)
          fi

          if [ -z "${ENI_ID:-}" ] || [ "$ENI_ID" = "None" ]; then
            echo "No se pudo determinar el ENI. Abortando."
            exit 1
          fi

          echo "ENI: $ENI_ID"
          PUBLIC_IP=$(aws ec2 describe-network-interfaces \
            --network-interface-ids "$ENI_ID" \
            --query 'NetworkInterfaces[0].Association.PublicIp' \
            --output text || true)

          if [ -z "${PUBLIC_IP:-}" ] || [ "$PUBLIC_IP" = "None" ]; then
            echo "No hay IP pública asociada al ENI. Verifica que el servicio tenga assignPublicIp=ENABLED."
            exit 1
          fi

          echo "IP pública: $PUBLIC_IP"
          echo "Actualizando Cloudflare..."

          REC_ID=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/dns_records?type=A&name=${NAME}" \
            -H "Authorization: Bearer ${CF_API_TOKEN}" \
            -H "Content-Type: application/json" | jq -r '.result[0].id // empty')

          if [ -z "$REC_ID" ]; then
            echo "No existe el record. Creando..."
            curl -s -X POST "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/dns_records" \
              -H "Authorization: Bearer ${CF_API_TOKEN}" \
              -H "Content-Type: application/json" \
              --data "{\"type\":\"A\",\"name\":\"${NAME}\",\"content\":\"${PUBLIC_IP}\",\"ttl\":60,\"proxied\":false}" \
              | jq .
          else
            echo "Existe record ${REC_ID}. Actualizando..."
            curl -s -X PUT "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/dns_records/${REC_ID}" \
              -H "Authorization: Bearer ${CF_API_TOKEN}" \
              -H "Content-Type: application/json" \
              --data "{\"type\":\"A\",\"name\":\"${NAME}\",\"content\":\"${PUBLIC_IP}\",\"ttl\":60,\"proxied\":false}" \
              | jq .
          fi

          echo "Listo: ${NAME} -> ${PUBLIC_IP}"